{"version":3,"sources":["utilities/format.js","contants/ControlType.js","utilities/handler.js","utilities/reactSelect.js","components/addOrEdit/addOrEdit.js","utilities/currrentActionHelper.js","containers/pages/Transportation/Update.js"],"names":["__webpack_require__","d","__webpack_exports__","formatDateTimeToString","gridViewFormatDateTimeToString","formatString","cloneObject","convertUTCDateToLocalDate","toCurrency","currencyToNumber","moment__WEBPACK_IMPORTED_MODULE_0__","moment__WEBPACK_IMPORTED_MODULE_0___default","n","valueDateTime","stringDateTime","moment","format","stringOrigin","stringReplace","result","indexStart","indexOf","indexEnd","str","chr","length","substr","setCharAt","obj","copy","constructor","attr","hasOwnProperty","stringDate","utcDate","Date","utc","local","numberString","toString","replace","isNaN","parseInt","ControlType","Text","Number","Money","Password","Select","CheckBox","Radio","AutoComplete","DateTime","DateTimeUTC","ReactSelect","ReactSelectMultiple","ReactSelectAsync","DuplicateText","Email","InputField","name","type","value","required","isReadOnly","isDefaultField","regex","selectConfig","duplicateConfig","Object","D_Working_Free_Lancer_Linh_Transportation_WebClient_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","Name","Type","Value","Required","IsReadOnly","IsDefaultField","Regex","SelectConfig","DuplicateConfig","handleErrorBasic","handleParameter","_i18n_key__WEBPACK_IMPORTED_MODULE_0__","react_redux_toastr__WEBPACK_IMPORTED_MODULE_1__","_contants_common__WEBPACK_IMPORTED_MODULE_2__","errorStatus","stringTitle","t","toastr","error","key","common","error400GetAPI","error401GetAPI","error403GetAPI","error404GetAPI","match","commonConstant","ParamAdd","params","id","reactSelectCustomStyles","isValid","borderColor","borderColorFocused","borderHoverColor","control","base","state","objectSpread","minHeight","&:hover","border","isFocused","boxShadow","reactSelectGetCurrentValue","options","option","find","_inputs","_currentAction","AddOrEdit","_Component","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","checkDuplicate","handleSubmitForm","event","preventDefault","handleValidation","model","fields","filter","item","forEach","toISOString","trim","addOrEditAction","handleBackList","history","goBack","addAction","editAction","requestAction","nextProps","getByIdModel","addModel","editModel","checkDuplicateModel","isLoading","GET_BY_ID","ADD","EDIT","CHECK_DUPLICATE","responseAction","keyFields","responseData","status","AddTitle","Success","success","addDataSuccess","setState","initModel","isEmptyOrSpace","Message","addDataFail","EditTitle","resultEdit","editDataSuccess","editDataFail","GetByIdTitle","Data","errorGetByIdAPI","moneyOnBlur","fieldName","target","modelFromFields","reduce","arr","defineProperty","errors","handleChangeFields","bind","assertThisInitialized","inherits","createClass","focus","strQuery","getByIdAction","_this$props","isValidForm","isfocus","map","field","index","fieldCanNotEmptyErrorMsg","_this$props2","handleChangeFieldsCallBack","_this$state","previousModel","fieldInfo","checked","tempValue","isAllNumber","test","validateEmail","errorEmail","fieldPhoneNumberInvalidErrorMsg","user","nextModel","dateValue","_this2","_this$props3","renderCallback","_this$state2","isCaseAdd","title","react_default","a","createElement","reactstrap_es","onSubmit","fieldLabel","valueField","invalidField","isHideField","Fragment","md","htmlFor","Parser","invalid","innerRef","self","push","onChange","readOnly","onBlur","Id","KeyName","entry_default","className","es","variant","color","outline","size","fieldInput","label","InActive","Active","reactSelectFormatOptions","react_select_browser_esm","classNamePrefix","styles","placeholder","pleaseSelect","isMulti","defaultValue","i","onInputChange","text","action","callback","timeout","clearTimeout","setTimeout","reactSelectInputChange","OnInputChangeCallback","filterOption","pleaseSearch","btnSubmit","onClick","btnBackList","Component","arrCurrentAction","isExistAction","removeAction","val","TransportationUpdate","D_Working_Free_Lancer_Linh_Transportation_WebClient_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","D_Working_Free_Lancer_Linh_Transportation_WebClient_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","carGetAllSelectReducer","driverGetAllSelectReducer","companyGetAllSelectReducer","generateMoneyTransportationReducer","currentAction","CAR","GETALL_SELECT","DRIVER","COMPANY","TRANSPORTATION","GENERATEMONEY","Records","concat","CarNumber","CapacityType","data","DriverPrimaryIdField","DriverSecondaryIdField","DriverTypeId","DriverType","Primary","Secondary","Code","CompanyId","CarId","generateMoneyTransportationAction","money","setHours","applyCheckAuthorized","carGetAllSelectAction","driverGetAllSelectAction","companyGetAllSelectAction","loading","loadingDataWhenFirstIn","loadingText","loadingClass","loadingSpinner","processingSpinner","react__WEBPACK_IMPORTED_MODULE_5___default","react_loading_overlay__WEBPACK_IMPORTED_MODULE_9___default","active","spinner","_components_addOrEdit_addOrEdit__WEBPACK_IMPORTED_MODULE_14__","assign","transportation","tableName","mapDispatchToProps","getByIdTransportationAction","addTransportationAction","editTransportationAction","translate","connect","getByIdTransportationReducer","addTransportationReducer","editTransportationReducer"],"mappings":"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","file":"static/js/10.93e40d44.chunk.js","sourcesContent":["import moment from 'moment';\r\nexport function formatStringToDateTime(stringDateTime, formatString) {\r\n    if (!stringDateTime || stringDateTime === '') return null;\r\n    if (formatString == null) formatString = 'DD/MM/YYYY HH:mm';\r\n    var dateTime = new Date(stringDateTime);\r\n    dateTime = moment(dateTime).format(formatString);\r\n    return dateTime;\r\n}\r\nexport function formatDateTimeToString(valueDateTime, formatString) {\r\n    if (!valueDateTime) return null;\r\n    var stringDateTime = moment(valueDateTime).format('YYYY-MM-DDTHH:mm:ss');\r\n    if (formatString != null) stringDateTime = moment(valueDateTime).format(formatString);\r\n    return stringDateTime;\r\n}\r\n\r\nexport function gridViewFormatDateTimeToString(valueDateTime, formatString) {\r\n    if (!valueDateTime) return null;\r\n    var stringDateTime = moment(valueDateTime).format('D/M/YYYY');\r\n    if (formatString != null) stringDateTime = moment(valueDateTime).format(formatString);\r\n    return stringDateTime;\r\n}\r\nexport function formatString(stringOrigin, stringReplace) {\r\n    if (stringOrigin == null || stringOrigin === '') return '';\r\n    let result = '';\r\n    const indexStart = stringOrigin.indexOf('{');\r\n    const indexEnd = stringOrigin.indexOf('}');\r\n    if (indexStart > -1 && indexStart > -1 && indexStart < indexEnd) {\r\n        result = setCharAt(stringOrigin, indexStart, indexEnd, stringReplace);\r\n    }\r\n    return result;\r\n}\r\nfunction setCharAt(str, indexStart, indexEnd, chr) {\r\n    if (indexStart > str.length - 1) return str;\r\n    return str.substr(0, indexStart) + chr + str.substr(indexEnd + 1);\r\n}\r\nexport function cloneObject(obj) {\r\n    if (null == obj || \"object\" != typeof obj) return obj;\r\n    var copy = obj.constructor();\r\n    for (var attr in obj) {\r\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\r\n    }\r\n    return copy;\r\n}\r\nexport function convertUTCDateToLocalDate(stringDate){\r\n    let utcDate = new Date(stringDate + 'z');\r\n    let localTime= moment.utc(utcDate).local();\r\n    return localTime;\r\n}\r\n\r\nexport function toCurrency(numberString) {\r\n    numberString = numberString.toString().replace(/,/g,'');\r\n    let result =  numberString.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return result;\r\n}\r\n\r\nexport function currencyToNumber(numberString) {\r\n    numberString = numberString.toString().replace(/,/g,'');\r\n    let result =  isNaN(parseInt(numberString)) ? 0 : parseInt(numberString);\r\n    return result;\r\n}","export const ControlType = {\r\n   Text: \"text\",\r\n   Number: \"number\",\r\n   Money: \"money\",\r\n   Password: \"password\",\r\n   Select: \"select\",\r\n   CheckBox: \"checkbox\",\r\n   Radio: \"radio\",\r\n   AutoComplete: \"autocomplete\",\r\n   DateTime: \"date\",\r\n   DateTimeUTC: \"dateUTC\",\r\n   ReactSelect: \"react-select\",\r\n   ReactSelectMultiple: \"react-select-multiple\",\r\n   ReactSelectAsync: \"react-select-async\",\r\n   DuplicateText: \"DuplicateText\",\r\n   Email: \"Email\",\r\n}\r\nexport class InputField {\r\n   constructor(name, type, value, required, isReadOnly, isDefaultField, regex, selectConfig, duplicateConfig) {\r\n      this.Name = name; // string\r\n      this.Type = type; // ControlType\r\n      this.Value = value; // any\r\n      this.Required = required; // bool\r\n      this.IsReadOnly = isReadOnly; // bool\r\n      this.IsDefaultField = isDefaultField; // bool\r\n      this.Regex = regex;\r\n      this.SelectConfig = selectConfig ? selectConfig : {}; // object\r\n      this.DuplicateConfig = duplicateConfig ? duplicateConfig : {};//{QueryString: null, ErrorMessage: null}\r\n   }\r\n}","import key from '../i18n/key';\r\nimport { toastr } from 'react-redux-toastr';\r\nimport { commonConstant } from '../contants/common';\r\nexport function handleErrorBasic(errorStatus, stringTitle, t) {\r\n    if (errorStatus === 400) {\r\n        toastr.error(stringTitle, t(key.common.error400GetAPI));\r\n        return true;\r\n    }\r\n    if (errorStatus === 401) {\r\n        toastr.error(stringTitle, t(key.common.error401GetAPI));\r\n        return true;\r\n    }\r\n    if (errorStatus === 403) {\r\n        toastr.error(stringTitle, t(key.common.error403GetAPI));\r\n        return true;\r\n    }\r\n    if (errorStatus === 404) {\r\n        toastr.error(stringTitle, t(key.common.error404GetAPI));\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function handleParameter(match) {    \r\n    let result = commonConstant.ParamAdd;\r\n    if (match && match.params && match.params.id) {\r\n        if (match.params.id > 0) {\r\n            result = parseInt(match.params.id);\r\n        } else {\r\n            result = match.params.id;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n","import key from '../i18n/key';\r\nexport function reactSelectCustomStyles(isValid) {\r\n    let borderColor = isValid ? '1px solid #9b9fa3' : '1px solid #f86c6b';\r\n    let borderColorFocused = isValid ? '1px solid #8ad4ee' : '1px solid #f86c6b';\r\n    let borderHoverColor = isValid ? '0 0 0 0.2rem rgba(32, 168, 216, 0.25)' : '0 0 0 0.2rem rgba(248, 108, 107, 0.25)';\r\n    return {\r\n        control: (base, state) => ({\r\n            ...base,\r\n            minHeight: '35px',\r\n            '&:hover': {},\r\n            border: state.isFocused ? borderColorFocused : borderColor,\r\n            boxShadow: state.isFocused ? borderHoverColor : 0,\r\n        })\r\n    }\r\n}\r\nexport function reactSelectFormatOptions(fieldInput, model, t) {\r\n    if (!fieldInput.SelectConfig) { return false; }\r\n    if (fieldInput.Name === 'Status') {\r\n        fieldInput.SelectConfig.options = [];\r\n        fieldInput.SelectConfig.options.push(\r\n            { value: 0, label: t(key.common.InActive) },\r\n            { value: 1, label: t(key.common.Active) }\r\n        );\r\n    }\r\n    else {\r\n        if (!fieldInput.SelectConfig.options) { return false; }\r\n    }\r\n    return true;\r\n}\r\nexport function reactSelectInputChange(text, action, callback, self) {\r\n    if (action.action !== \"input-blur\" && action.action !== \"menu-close\" && text.length >= 1) {\r\n        if (self.timeout) clearTimeout(self.timeout);\r\n        self.timeout = setTimeout(() => {\r\n            callback(text);\r\n        }, 300);\r\n    }\r\n}\r\nexport function reactSelectGetCurrentValue(options, value) {\r\n    var option = options.find(option => option.value === value);\r\n    if (option) {\r\n        return option;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport key from '../../i18n/key';\r\nimport { Button, Label, Card, CardBody, CardFooter, CardHeader, Form, FormGroup, FormFeedback, Input, Row, Col } from \"reactstrap\";\r\nimport DateTimePicker from 'react-datetime-picker';\r\nimport Parser from 'html-react-parser';\r\nimport { formatString, formatDateTimeToString, convertUTCDateToLocalDate, cloneObject, toCurrency, currencyToNumber } from '../../utilities/format';\r\nimport { isEmptyOrSpace, validateEmail } from '../../utilities/validate';\r\nimport { ControlType } from '../../contants/ControlType';\r\nimport { handleParameter, handleErrorBasic } from '../../utilities/handler';\r\nimport { commonConstant } from '../../contants/common';\r\nimport { reactSelectCustomStyles, reactSelectFormatOptions, reactSelectInputChange, reactSelectGetCurrentValue } from '../../utilities/reactSelect';\r\nimport { toastr } from 'react-redux-toastr';\r\nimport { AppSwitch } from '@coreui/react';\r\nimport Select from 'react-select';\r\nvar _inputs = [];\r\n\r\nvar _currentAction = null;\r\nexport class AddOrEdit extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let modelFromFields = props.fields.reduce((arr, item) => ({ ...arr, [item.Name]: item.Value }), {});\r\n        this.state = {\r\n            errors: {},\r\n            initModel: cloneObject(modelFromFields),\r\n            model: cloneObject(modelFromFields),\r\n        };\r\n        this.handleChangeFields = this.handleChangeFields.bind(this);\r\n    }\r\n\r\n    checkDuplicate = [];\r\n\r\n    componentDidMount() {\r\n        if (_inputs[0]) _inputs[0].focus();\r\n        const { match } = this.props;\r\n        if (handleParameter(match) !== commonConstant.ParamAdd) {\r\n            const strQuery = '?id=' + handleParameter(match);\r\n            this.props.getByIdAction(strQuery);\r\n        }\r\n    }\r\n    handleSubmitForm = (event) => {\r\n        if (!event) return;\r\n        event.preventDefault();\r\n        if (!this.handleValidation()) return;\r\n        const { model } = this.state;\r\n        // Xử lý input, convert from local time to UTC time to save db\r\n        let fields = this.props.fields;\r\n        let dateTimeUTCFields = fields.filter(item => { return item.Type === ControlType.DateTimeUTC && !item.IsDefaultField; });\r\n        dateTimeUTCFields.forEach(item => {\r\n            model[item.Name] = (new Date(model[item.Name])).toISOString();\r\n        });\r\n\r\n        let moneyFields = fields.filter(item => { return item.Type === ControlType.Money });\r\n        moneyFields.forEach(item => {\r\n            model[item.Name] = currencyToNumber(model[item.Name]);\r\n        });\r\n\r\n        let textFields = fields.filter(item => { return item.Type === ControlType.Text });\r\n        textFields.forEach(item => {\r\n            model[item.Name] = model[item.Name].trim();\r\n        });\r\n\r\n        this.addOrEditAction(model);\r\n    }\r\n    handleBackList = () => {\r\n        const { history } = this.props;\r\n        if (history) {\r\n            history.goBack();\r\n        }\r\n    }\r\n    handleValidation() {\r\n        const { t, keyFields, fields } = this.props;\r\n        const { model } = this.state;\r\n        let isValidForm = true, errors = {};\r\n        let isfocus = false;\r\n        //Check validate from fields\r\n        fields.map((field, index) => {\r\n            if (field.Required) {\r\n                if (\r\n                    (field.Type === ControlType.ReactSelect && model[field.Name] === 0)\r\n                    ||\r\n                    (field.Type === ControlType.ReactSelectMultiple && model[field.Name].length === 0)\r\n                    ||\r\n                    isEmptyOrSpace(model[field.Name])\r\n                ) {\r\n                    isValidForm = false;\r\n                    errors[field.Name] = formatString(t(key.common.fieldCanNotEmptyErrorMsg), t(keyFields[field.Name]));\r\n                    if (_inputs[index] && !isfocus) { isfocus = true; _inputs[index].focus() };\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n        this.setState({ errors: errors });\r\n        return isValidForm;\r\n    }\r\n    handleChangeFields(event, field) {\r\n        const { t, fields, handleChangeFieldsCallBack } = this.props;\r\n        const { model, errors } = this.state;\r\n        let previousModel = cloneObject(model);\r\n\r\n        let fieldInfo = fields.find(item => item.Name === field);\r\n        if (!event || !fieldInfo) { return }\r\n        else if ((fieldInfo.Type === ControlType.ReactSelect || fieldInfo.Type === ControlType.ReactSelectAsync) && event.value >= 0) {\r\n            model[field] = event.value;\r\n        }\r\n        else if (fieldInfo.Type === ControlType.ReactSelectMultiple) {\r\n            model[field] = event.map(item => item.value);\r\n        }\r\n        else if (  fieldInfo.Type === ControlType.DateTime || fieldInfo.Type === ControlType.DateTimeUTC ) {\r\n            model[field] = formatDateTimeToString(event);\r\n        }\r\n        else if (event.target && fieldInfo.Type === ControlType.CheckBox) {\r\n            model[field] = event.target.checked;\r\n        }\r\n        else if (event.target && fieldInfo.Type === ControlType.Number) {\r\n            model[field] = isNaN(parseInt(event.target.value)) ? 0 : parseInt(event.target.value);\r\n        }\r\n        else if (event.target && fieldInfo.Type === ControlType.Money) {\r\n            let value = event.target ? event.target.value : '';\r\n            let tempValue = value.replace(/,/g, '');\r\n            //Check is all number or not\r\n            var isAllNumber = /^\\d+$/.test(tempValue);\r\n            if (value !== '' && !isAllNumber) {\r\n                return;\r\n            }\r\n            model[field] = value;\r\n\r\n        }\r\n        else { // Any thing else is case input type=text\r\n            model[field] = event.target ? event.target.value : '';\r\n\r\n            // Check Email Validate\r\n            if (fieldInfo.Name === ControlType.Email) {\r\n                if (!validateEmail(model[field])) {\r\n                    errors[field] = formatString(t(key.common.fieldPhoneNumberInvalidErrorMsg), t(key.user.Email));\r\n                } else {\r\n                    if (errors[field]) {\r\n                        let errorEmail = formatString(t(key.common.fieldPhoneNumberInvalidErrorMsg), t(key.user.Email));\r\n                        if (errors[field] === errorEmail) {\r\n                            delete errors[field];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let nextModel = cloneObject(model);\r\n        if (handleChangeFieldsCallBack) {\r\n            handleChangeFieldsCallBack(previousModel, nextModel);\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            model: model,\r\n            errors: errors\r\n        });\r\n    }\r\n    handleChangeDateTimePickers(field, dateValue) {\r\n        let { model } = this.state;\r\n        model[field] = formatDateTimeToString(dateValue);\r\n        this.setState({\r\n            ...this.state,\r\n            model: model\r\n        });\r\n    }\r\n    addOrEditAction = (model) => {\r\n        const { match } = this.props;\r\n        if (handleParameter(match) === commonConstant.ParamAdd) {\r\n            this.props.addAction(model);\r\n        }\r\n        else {\r\n            this.props.editAction(model);\r\n        }\r\n    }\r\n    requestAction = (nextProps) => {\r\n        let { getByIdModel, addModel, editModel, checkDuplicateModel } = nextProps;\r\n        if (getByIdModel && getByIdModel.isLoading) {\r\n            _currentAction = commonConstant.GET_BY_ID;\r\n            return true;\r\n        }\r\n        if (addModel && addModel.isLoading) {\r\n            _currentAction = commonConstant.ADD;\r\n            return true;\r\n        }\r\n        if (editModel && editModel.isLoading) {\r\n            _currentAction = commonConstant.EDIT;\r\n            return true;\r\n        }\r\n        if (checkDuplicateModel && checkDuplicateModel.isLoading) {\r\n            _currentAction = commonConstant.CHECK_DUPLICATE;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    responseAction = (nextProps) => {\r\n        const { t, keyFields, addModel, editModel, getByIdModel, fields } = nextProps;\r\n        switch (_currentAction) {\r\n            //ADD\r\n            case (commonConstant.ADD):\r\n                if (!addModel || !addModel.responseData ||\r\n                    handleErrorBasic(addModel.responseData.status, t(keyFields.AddTitle), t)) return;\r\n                const result = addModel.responseData;\r\n                if (result.Success) {\r\n                    toastr.success(t(keyFields.AddTitle), t(key.common.addDataSuccess));\r\n                    this.setState({\r\n                        ...this.state,\r\n                        model: cloneObject(this.state.initModel),\r\n                    });\r\n                } else if (!isEmptyOrSpace(result.Message)) {\r\n                    toastr.error(t(keyFields.AddTitle), result.Message);\r\n                } else {\r\n                    toastr.error(t(keyFields.AddTitle), t(key.common.addDataFail));\r\n                }\r\n                break;\r\n            //EDIT\r\n            case (commonConstant.EDIT):\r\n                if (!editModel || !editModel.responseData ||\r\n                    handleErrorBasic(editModel.responseData.status, t(keyFields.EditTitle), t)) return;\r\n                \r\n                const resultEdit = editModel.responseData;\r\n                if (editModel.responseData.Success) {\r\n\r\n                    toastr.success(t(keyFields.EditTitle), t(key.common.editDataSuccess));\r\n                } else if (!isEmptyOrSpace(resultEdit.Message)) {\r\n                    toastr.error(t(keyFields.AddTitle), resultEdit.Message);\r\n                }\r\n                else {\r\n                    toastr.error(t(keyFields.EditTitle), t(key.common.editDataFail));\r\n                }\r\n                break;\r\n            //GETBYID\r\n            case (commonConstant.GET_BY_ID):\r\n                if (!getByIdModel || !getByIdModel.responseData ||\r\n                    handleErrorBasic(getByIdModel.responseData.status, t(keyFields.GetByIdTitle), t)) return;\r\n                if (getByIdModel.responseData.Success) {\r\n                    const { Data } = getByIdModel.responseData;\r\n                    if (Data) {\r\n                        let dateTimeUTCFields = fields.filter(item => { return item.Type === ControlType.DateTimeUTC });\r\n                        dateTimeUTCFields.forEach(item => {\r\n                            if (Data[item.Name]) {\r\n                                Data[item.Name] = formatDateTimeToString(convertUTCDateToLocalDate(Data[item.Name]));\r\n                            }\r\n                        });\r\n\r\n                        this.setState({\r\n                            ...this.state,\r\n                            model: cloneObject(Data),\r\n                        });\r\n                    }\r\n                } else {\r\n                    toastr.error(t(keyFields.GetByIdTitle), t(key.common.errorGetByIdAPI));\r\n                }\r\n                break;\r\n            //DEFAULT    \r\n            default:\r\n                break;\r\n        }\r\n        _currentAction = null;\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        //request action\r\n        if (this.requestAction(nextProps)) return;\r\n        //response action\r\n        this.responseAction(nextProps);\r\n    }\r\n    moneyOnBlur = (event, fieldName) => {\r\n        const { model } = this.state;\r\n        let value = event.target ? event.target.value : '';\r\n\r\n        model[fieldName] = toCurrency(value);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            model: model,\r\n        });\r\n    }\r\n    render() {\r\n        const { t, keyFields, fields, match, renderCallback } = this.props;\r\n        const { model, errors } = this.state;\r\n        if (renderCallback) {\r\n            renderCallback(model);\r\n        } \r\n        const isCaseAdd = handleParameter(match) === commonConstant.ParamAdd;\r\n        const title = handleParameter(match) === commonConstant.ParamAdd ? t(keyFields.AddTitle) : t(keyFields.EditTitle);\r\n\r\n        return (\r\n            <Form onSubmit={this.handleSubmitForm}>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <strong>{title}</strong>\r\n                    </CardHeader>\r\n                    <CardBody>\r\n                        <Row>\r\n                            {\r\n                                fields.map((item, index) => {\r\n                                    let fieldLabel = t(keyFields[item.Name]) ? t(keyFields[item.Name]) : t(key.common[item.Name]);\r\n                                    fieldLabel += item.Required ? ' <sup>*</sup>' : '';\r\n                                    let valueField = model[item.Name];\r\n                                    let invalidField = errors[item.Name] ? true : null;\r\n                                    const isHideField = !(item.IsDefaultField && isCaseAdd);\r\n                                    return (<React.Fragment key={index}>{\r\n                                        isHideField && item.Type &&\r\n                                        <Col md=\"6\">\r\n                                            <FormGroup>\r\n                                                <Label htmlFor={item.Name}>{Parser(fieldLabel)}</Label>\r\n                                                {(item.Type === ControlType.Text || item.Type === ControlType.Password || item.Type === ControlType.Number) &&\r\n                                                    <Input id={item.Name} name={item.Name} type={item.Type}\r\n                                                        value={valueField} invalid={invalidField}\r\n                                                        innerRef={(self) => { if (self) _inputs.push(self); }}\r\n                                                        onChange={(event) => this.handleChangeFields(event, item.Name)}\r\n                                                        readOnly={item.IsReadOnly}\r\n                                                    />\r\n                                                }\r\n                                                {\r\n                                                    (item.Type === ControlType.Money) &&\r\n                                                    <Input id={item.Name} name={item.Name} type='text'\r\n                                                        value={valueField} invalid={invalidField}\r\n                                                        innerRef={(self) => { if (self) _inputs.push(self); }}\r\n                                                        onChange={(event) => this.handleChangeFields(event, item.Name)}\r\n                                                        readOnly={item.IsReadOnly}\r\n                                                        onBlur={(event) => this.moneyOnBlur(event, item.Name)}\r\n                                                    />\r\n                                                }\r\n                                                {item.Type === ControlType.Select && item.SelectConfig &&\r\n                                                    <Input id={item.Name} name={item.Name} type={item.Type}\r\n                                                        value={valueField}\r\n                                                        onChange={(event) => this.handleChangeFields(event, item.Name)}\r\n                                                        invalid={invalidField}>\r\n                                                        {item.SelectConfig.map(item => <option key={item.Id} value={item.Id}>{t(key.common[item.KeyName])}</option>)}\r\n                                                    </Input>\r\n                                                }\r\n                                                {item.Type === ControlType.DateTime &&\r\n                                                    <DateTimePicker id={item.Name} name={item.Name}\r\n                                                        innerRef={(self) => { if (self) _inputs.push(self); }}\r\n                                                        value={new Date(valueField)}\r\n                                                        onChange={(event) => this.handleChangeFields(event, item.Name)}\r\n                                                        className={(item.IsReadOnly ? 'is-readonly' : (errors[item.Name] ? 'is-invalid' : '')) + ' form-control'}\r\n                                                        readOnly={item.IsReadOnly}\r\n                                                        format=\"d/M/y\"\r\n                                                    />\r\n                                                }\r\n\r\n                                                {item.Type === ControlType.DateTimeUTC &&\r\n                                                    <DateTimePicker id={item.Name} name={item.Name}\r\n                                                        innerRef={(self) => { if (self) _inputs.push(self); }}\r\n                                                        value={new Date(valueField)}\r\n                                                        onChange={(event) => this.handleChangeFields(event, item.Name)}\r\n                                                        className={(item.IsReadOnly ? 'is-readonly' : (errors[item.Name] ? 'is-invalid' : '')) + ' form-control'}\r\n                                                        readOnly={item.IsReadOnly}\r\n                                                        format=\"dd/MM/y h:mm a\"\r\n                                                    />\r\n                                                }\r\n                                                {\r\n                                                    item.Type === ControlType.CheckBox &&\r\n                                                    <AppSwitch className={'mx-1 custom-checkbox'} variant={'pill'} color={'primary'} outline={'alt'} size='sm'\r\n                                                        checked={model[item.Name]}\r\n                                                        onChange={(event) => this.handleChangeFields(event, item.Name)}\r\n                                                    />\r\n                                                }\r\n                                                {\r\n                                                    item.Type === ControlType.ReactSelect && reactSelectFormatOptions(item, model, t) &&\r\n                                                    <Select\r\n                                                        className=\"basic-single\"\r\n                                                        classNamePrefix=\"select\"\r\n                                                        styles={reactSelectCustomStyles(errors[item.Name] ? false : true)}\r\n                                                        options={item.SelectConfig.options}\r\n                                                        value={reactSelectGetCurrentValue(item.SelectConfig.options, model[item.Name])}\r\n                                                        onChange={(event) => this.handleChangeFields(event, item.Name)}\r\n                                                        placeholder={t(key.common.pleaseSelect) + '...'}\r\n                                                    />\r\n                                                }\r\n                                                {\r\n                                                    item.Type === ControlType.ReactSelectMultiple && item.SelectConfig && item.SelectConfig.options &&\r\n                                                    <Select\r\n                                                        isMulti\r\n                                                        defaultValue={item.SelectConfig.options.filter(i => model[item.Name].indexOf(i.value) > -1)}\r\n                                                        styles={reactSelectCustomStyles(errors[item.Name] ? false : true)}\r\n                                                        options={item.SelectConfig.options}\r\n                                                        className=\"basic-multi-select\"\r\n                                                        classNamePrefix=\"select\"\r\n                                                        onChange={(event) => this.handleChangeFields(event, item.Name)}\r\n                                                        placeholder={t(key.common.pleaseSelect) + '...'}\r\n                                                    />\r\n                                                }\r\n                                                {\r\n                                                    item.Type === ControlType.ReactSelectAsync && item.SelectConfig &&\r\n                                                    <Select\r\n                                                        className=\"basic-single\"\r\n                                                        classNamePrefix=\"select\"\r\n                                                        styles={reactSelectCustomStyles(errors[item.Name] ? false : true)}\r\n                                                        options={item.SelectConfig.options}\r\n\r\n                                                        //value={item.SelectConfig.options.find(option => option.value === (model[item.Name] !== '' ? model[item.Name] : -1))}\r\n\r\n                                                        onInputChange={(text, action) => reactSelectInputChange(text, action, item.SelectConfig.OnInputChangeCallback, this)}\r\n                                                        isLoading={item.SelectConfig.isLoading}\r\n                                                        filterOption={false}\r\n                                                        onChange={(event) => this.handleChangeFields(event, item.Name)}\r\n                                                        placeholder={t(key.common.pleaseSearch) + '...'}\r\n                                                    />\r\n                                                }\r\n                                                <FormFeedback className={item.Type === ControlType.ReactSelect || item.Type === ControlType.ReactSelectMultiple || item.Type === ControlType.ReactSelectAsync ? 'react-select' : ''}>\r\n                                                    {errors[item.Name]}\r\n                                                </FormFeedback>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    }</React.Fragment>);\r\n                                })\r\n                            }\r\n                        </Row>\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        <Button type=\"submit\" size=\"sm\" color=\"primary\">\r\n                            <i className=\"fa fa-save\"></i> {t(key.common.btnSubmit)}\r\n                        </Button>{' '}\r\n                        <Button type=\"reset\" size=\"sm\" color=\"danger\" onClick={this.handleBackList}>\r\n                            <i className=\"fa fa-ban\"></i> {t(key.common.btnBackList)}\r\n                        </Button>\r\n                    </CardFooter>\r\n                </Card>\r\n            </Form>\r\n        );\r\n    }\r\n}","export function addAction(arrCurrentAction, action) {\r\n    arrCurrentAction.push(action);\r\n}\r\n\r\nexport function isExistAction(arrCurrentAction, action) {\r\n    return arrCurrentAction.indexOf(action) !== -1;\r\n}\r\n\r\nexport function removeAction(arrCurrentAction, action) {\r\n    return arrCurrentAction.filter((val) => {\r\n        return val !== action\r\n    });\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { translate } from 'react-i18next';\r\nimport key from '../../../i18n/key';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport { getByIdTransportationAction, addTransportationAction, editTransportationAction } from '../../../actions/transportation';\r\nimport { carGetAllSelectAction } from '../../../actions/car';\r\nimport { applyCheckAuthorized } from '../../../utilities/validate'; \r\nimport { formatDateTimeToString, toCurrency } from '../../../utilities/format'; \r\nimport { AddOrEdit } from '../../../components/addOrEdit/addOrEdit';\r\nimport { ControlType, InputField } from '../../../contants/ControlType';\r\nimport { DriverType } from '../../../contants/staticData';\r\nimport { driverGetAllSelectAction } from '../../../actions/driver';\r\nimport { companyGetAllSelectAction } from '../../../actions/company';\r\nimport { generateMoneyTransportationAction } from '../../../actions/transportation';\r\nimport { handleErrorBasic } from '../../../utilities/handler';\r\nimport { addAction, isExistAction, removeAction } from '../../../utilities/currrentActionHelper';\r\nimport { COMPANY } from \"../../../actionTypes/company\";\r\nimport { DRIVER } from \"../../../actionTypes/driver\";\r\nimport { CAR } from \"../../../actionTypes/car\";\r\nimport { TRANSPORTATION } from \"../../../actionTypes/transportation\";\r\n\r\nclass TransportationUpdate extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let fields = [\r\n            //Detail fields\r\n            new InputField(\"TransportDate\", ControlType.DateTime, formatDateTimeToString(new Date().setHours(0,0,0,0)), true),\r\n            new InputField(\"CarId\", ControlType.ReactSelect, 0, true),\r\n            new InputField(\"CompanyId\", ControlType.ReactSelect, 0, true),\r\n            new InputField(\"DocumentNumber\", ControlType.Text, '', true),\r\n            new InputField(\"Report\", ControlType.Text, '', false),\r\n            new InputField(\"Money\", ControlType.Money, '', true),\r\n            new InputField(\"Note\", ControlType.Text, '', false),\r\n            new InputField(\"DriverPrimaryId\", ControlType.ReactSelect, 0, true),\r\n            new InputField(\"DriverSecondaryId\", ControlType.ReactSelect, null, false),\r\n        ]\r\n        this.state = {\r\n            fields: fields,\r\n            currentAction: []\r\n        };\r\n        applyCheckAuthorized();\r\n    }\r\n    componentDidMount() {\r\n        this.props.carGetAllSelectAction();\r\n        this.props.driverGetAllSelectAction();\r\n        this.props.companyGetAllSelectAction();\r\n    }\r\n    requestAction = (nextProps) => {\r\n        let { carGetAllSelectReducer, driverGetAllSelectReducer, companyGetAllSelectReducer, generateMoneyTransportationReducer } = nextProps;\r\n        const { currentAction } = this.state;\r\n        let result = false;\r\n        if (carGetAllSelectReducer.isLoading && !isExistAction(currentAction, CAR.GETALL_SELECT)) {\r\n            addAction(currentAction, CAR.GETALL_SELECT)\r\n            result = true;\r\n        }\r\n\r\n        if (driverGetAllSelectReducer.isLoading && !isExistAction(currentAction, DRIVER.GETALL_SELECT)) {\r\n            addAction(currentAction, DRIVER.GETALL_SELECT)\r\n            result = true;\r\n        }\r\n\r\n        if (companyGetAllSelectReducer.isLoading && !isExistAction(currentAction, COMPANY.GETALL_SELECT)) {\r\n            addAction(currentAction, COMPANY.GETALL_SELECT)\r\n            result = true;\r\n        }\r\n\r\n        if (generateMoneyTransportationReducer.isLoading && !isExistAction(currentAction, TRANSPORTATION.GENERATEMONEY)) {\r\n            addAction(currentAction, TRANSPORTATION.GENERATEMONEY)\r\n            result = true;\r\n        }\r\n        return result;\r\n    }\r\n    responseAction = (nextProps) => {\r\n        const { carGetAllSelectReducer, t, driverGetAllSelectReducer, companyGetAllSelectReducer, generateMoneyTransportationReducer } = nextProps;\r\n        const { fields, currentAction } = this.state;\r\n\r\n        //Car Get All Select => Dropdown List\r\n        if (!carGetAllSelectReducer.isLoading && isExistAction(currentAction, CAR.GETALL_SELECT)) {\r\n            if (!carGetAllSelectReducer.responseData ||\r\n                handleErrorBasic(carGetAllSelectReducer.responseData.status, 'Tải danh sách Xe', t)) return;\r\n\r\n            let carIdField = fields.find(obj => obj.Name === \"CarId\");\r\n            carIdField.SelectConfig.options = carGetAllSelectReducer.responseData.Data.Records.map(item => {\r\n                return {\r\n                    value: item.Id,\r\n                    label: `${item.CarNumber} | ${item.CapacityType}`\r\n                }\r\n            });\r\n            this.setState({ currentAction: removeAction(currentAction, CAR.GETALL_SELECT) });\r\n        }\r\n\r\n        //Driver Get All Select => Dropdown List\r\n        if (!driverGetAllSelectReducer.isLoading && isExistAction(currentAction, DRIVER.GETALL_SELECT)) {\r\n            if ( !driverGetAllSelectReducer.responseData ||\r\n                handleErrorBasic(driverGetAllSelectReducer.responseData.status, 'Tải danh sách Xe', t)) return;\r\n\r\n            const data = driverGetAllSelectReducer.responseData.Data.Records;\r\n\r\n            let DriverPrimaryIdField = fields.find(obj => obj.Name === \"DriverPrimaryId\");\r\n            let DriverSecondaryIdField = fields.find(obj => obj.Name === \"DriverSecondaryId\");\r\n\r\n\r\n            DriverPrimaryIdField.SelectConfig.options = data.filter((item) => {\r\n                return item.DriverTypeId === DriverType.Primary\r\n            }).map(item => {\r\n                return {\r\n                    value: item.Id,\r\n                    label: item.Name\r\n                }\r\n            });\r\n            DriverSecondaryIdField.SelectConfig.options = data.filter((item) => {\r\n                return item.DriverTypeId === DriverType.Secondary\r\n            }).map(item => {\r\n                return {\r\n                    value: item.Id,\r\n                    label: item.Name\r\n                }\r\n            });\r\n\r\n            this.setState({ currentAction: removeAction(currentAction, DRIVER.GETALL_SELECT) });\r\n        }\r\n\r\n        //Company Get All Select => Dropdown List\r\n        if (!companyGetAllSelectReducer.isLoading && isExistAction(currentAction, COMPANY.GETALL_SELECT)) {\r\n            if (!companyGetAllSelectReducer.responseData ||\r\n                handleErrorBasic(companyGetAllSelectReducer.responseData.status, 'Tải danh sách Xe', t)) return;\r\n\r\n            let CompanyIdField = fields.find(obj => obj.Name === \"CompanyId\");\r\n            CompanyIdField.SelectConfig.options = companyGetAllSelectReducer.responseData.Data.Records.map(item => {\r\n                return {\r\n                    value: item.Id,\r\n                    label: `${item.Code} | ${item.Name}`\r\n                }\r\n            });\r\n            this.setState({ currentAction: removeAction(currentAction, COMPANY.GETALL_SELECT) });\r\n        }\r\n\r\n        //Generate Money\r\n        if (!generateMoneyTransportationReducer.isLoading && isExistAction(currentAction, TRANSPORTATION.GENERATEMONEY)) {\r\n            if (!generateMoneyTransportationReducer.responseData ||\r\n                handleErrorBasic(generateMoneyTransportationReducer.responseData.status, 'Loading thành tiền', t)) return;\r\n\r\n            this.setState({ currentAction: removeAction(currentAction, TRANSPORTATION.GENERATEMONEY)});\r\n        }\r\n    }\r\n    componentWillReceiveProps(nextProps) {\r\n        //request action\r\n        if (this.requestAction(nextProps)) return;\r\n        //response action\r\n        this.responseAction(nextProps);\r\n    }\r\n\r\n    handleChangeFieldsCallBack = (previousModel, nextModel) => {\r\n       if(nextModel.CompanyId !== 0 && nextModel.CarId !== 0 ){\r\n            if(nextModel.CompanyId !== previousModel.CompanyId || nextModel.CarId !== previousModel.CarId){\r\n                this.props.generateMoneyTransportationAction(`?companyid=${nextModel.CompanyId}&carid=${nextModel.CarId}`);\r\n            }\r\n       }\r\n    }\r\n\r\n    renderCallback = (model) => {\r\n        const { generateMoneyTransportationReducer } = this.props;\r\n\r\n        if(generateMoneyTransportationReducer.responseData && generateMoneyTransportationReducer.responseData.Data >= 0){\r\n            let money = generateMoneyTransportationReducer.responseData.Data;\r\n            model.Money = money === 0 ? 0 : toCurrency(money);\r\n            delete generateMoneyTransportationReducer.responseData;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const { t, addModel, editModel, getByIdModel, carGetAllSelectReducer, driverGetAllSelectReducer, companyGetAllSelectReducer, generateMoneyTransportationReducer } = this.props;\r\n        const { currentAction } = this.state;\r\n\r\n        let loading = currentAction.length > 0 || addModel.isLoading || editModel.isLoading;\r\n\r\n        // loadingDataWhenFirstIn is true, khi muon dang tai data\r\n        let loadingDataWhenFirstIn = getByIdModel.isLoading || carGetAllSelectReducer.isLoading || driverGetAllSelectReducer.isLoading || companyGetAllSelectReducer.isLoading || generateMoneyTransportationReducer.isLoading;\r\n        let loadingText = '', loadingClass = '';\r\n\r\n        if (loading) {\r\n            loadingText = loadingDataWhenFirstIn ? t(key.common.loadingSpinner) : t(key.common.processingSpinner);\r\n            loadingClass = loadingDataWhenFirstIn ? '' : 'overlayFullScreen';\r\n        }\r\n\r\n        return (\r\n            <div className=\"animated fadeIn\">\r\n                <LoadingOverlay\r\n                    active={loading}\r\n                    spinner\r\n                    text={loadingText}\r\n                    className={loadingClass}\r\n                >\r\n                    <AddOrEdit\r\n                        keyFields={key.transportation}\r\n                        tableName=\"TRANSPORTATION\"\r\n                        fields={this.state.fields}\r\n                        handleChangeFieldsCallBack={this.handleChangeFieldsCallBack}\r\n                        renderCallback={this.renderCallback}\r\n                        {...this.props}\r\n                    />\r\n                </LoadingOverlay>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    getByIdModel: state.getByIdTransportationReducer,\r\n    addModel: state.addTransportationReducer,\r\n    editModel: state.editTransportationReducer,\r\n    carGetAllSelectReducer: state.carGetAllSelectReducer,\r\n    driverGetAllSelectReducer: state.driverGetAllSelectReducer,\r\n    companyGetAllSelectReducer: state.companyGetAllSelectReducer,\r\n    generateMoneyTransportationReducer: state.generateMoneyTransportationReducer,\r\n});\r\nconst mapDispatchToProps = {\r\n    getByIdAction: getByIdTransportationAction,\r\n    addAction: addTransportationAction,\r\n    editAction: editTransportationAction,\r\n    carGetAllSelectAction,\r\n    driverGetAllSelectAction,\r\n    companyGetAllSelectAction,\r\n    generateMoneyTransportationAction,\r\n\r\n};\r\nexport default translate()(connect(mapStateToProps, mapDispatchToProps)(TransportationUpdate));"],"sourceRoot":""}